/**
 * Autogenerated by Thrift Compiler (0.9.1)
 * <p/>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.repetti.samples.thrift.generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

public class SpaceMonkey implements org.apache.thrift.TBase<SpaceMonkey, SpaceMonkey._Fields>, java.io.Serializable, Cloneable, Comparable<SpaceMonkey> {
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SpaceMonkey");
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("weight", org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.I32, (short) 3);
    private static final org.apache.thrift.protocol.TField JUST_CAME_FIELD_DESC = new org.apache.thrift.protocol.TField("justCame", org.apache.thrift.protocol.TType.BOOL, (short) 4);
    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short) 5);
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    // isset id assignments
    private static final int __WEIGHT_ISSET_ID = 0;
    private static final int __AGE_ISSET_ID = 1;
    private static final int __JUSTCAME_ISSET_ID = 2;

    static {
        schemes.put(StandardScheme.class, new SpaceMonkeyStandardSchemeFactory());
        schemes.put(TupleScheme.class, new SpaceMonkeyTupleSchemeFactory());
    }

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.JUST_CAME, new org.apache.thrift.meta_data.FieldMetaData("justCame", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
        tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SpaceMonkey.class, metaDataMap);
    }

    public String name; // required
    public int weight; // required
    public int age; // required
    public boolean justCame; // required
    public String description; // optional
    private byte __isset_bitfield = 0;
    private _Fields optionals[] = {_Fields.DESCRIPTION};

    public SpaceMonkey(
            String name,
            int weight,
            int age,
            boolean justCame) {
        this();
        this.name = name;
        this.weight = weight;
        setWeightIsSet(true);
        this.age = age;
        setAgeIsSet(true);
        this.justCame = justCame;
        setJustCameIsSet(true);
    }

    public SpaceMonkey() {
        this.age = 0;

        this.justCame = false;

    }

    public void setWeightIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEIGHT_ISSET_ID, value);
    }

    public void setAgeIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGE_ISSET_ID, value);
    }

    public void setJustCameIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __JUSTCAME_ISSET_ID, value);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SpaceMonkey(SpaceMonkey other) {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetName()) {
            this.name = other.name;
        }
        this.weight = other.weight;
        this.age = other.age;
        this.justCame = other.justCame;
        if (other.isSetDescription()) {
            this.description = other.description;
        }
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
        return this.name != null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
        return this.description != null;
    }

    public SpaceMonkey deepCopy() {
        return new SpaceMonkey(this);
    }

    @Override
    public void clear() {
        this.name = null;
        setWeightIsSet(false);
        this.weight = 0;
        this.age = 0;

        this.justCame = false;

        this.description = null;
    }

    public void setNameIsSet(boolean value) {
        if (!value) {
            this.name = null;
        }
    }

    public void setDescriptionIsSet(boolean value) {
        if (!value) {
            this.description = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case NAME:
                if (value == null) {
                    unsetName();
                } else {
                    setName((String) value);
                }
                break;

            case WEIGHT:
                if (value == null) {
                    unsetWeight();
                } else {
                    setWeight((Integer) value);
                }
                break;

            case AGE:
                if (value == null) {
                    unsetAge();
                } else {
                    setAge((Integer) value);
                }
                break;

            case JUST_CAME:
                if (value == null) {
                    unsetJustCame();
                } else {
                    setJustCame((Boolean) value);
                }
                break;

            case DESCRIPTION:
                if (value == null) {
                    unsetDescription();
                } else {
                    setDescription((String) value);
                }
                break;

        }
    }

    public void unsetName() {
        this.name = null;
    }

    public void unsetWeight() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEIGHT_ISSET_ID);
    }

    public void unsetAge() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGE_ISSET_ID);
    }

    public void unsetJustCame() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __JUSTCAME_ISSET_ID);
    }

    public void unsetDescription() {
        this.description = null;
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case NAME:
                return getName();

            case WEIGHT:
                return Integer.valueOf(getWeight());

            case AGE:
                return Integer.valueOf(getAge());

            case JUST_CAME:
                return Boolean.valueOf(isJustCame());

            case DESCRIPTION:
                return getDescription();

        }
        throw new IllegalStateException();
    }

    public String getName() {
        return this.name;
    }

    public SpaceMonkey setName(String name) {
        this.name = name;
        return this;
    }

    public int getWeight() {
        return this.weight;
    }

    public SpaceMonkey setWeight(int weight) {
        this.weight = weight;
        setWeightIsSet(true);
        return this;
    }

    public int getAge() {
        return this.age;
    }

    public SpaceMonkey setAge(int age) {
        this.age = age;
        setAgeIsSet(true);
        return this;
    }

    public boolean isJustCame() {
        return this.justCame;
    }

    public SpaceMonkey setJustCame(boolean justCame) {
        this.justCame = justCame;
        setJustCameIsSet(true);
        return this;
    }

    public String getDescription() {
        return this.description;
    }

    public SpaceMonkey setDescription(String description) {
        this.description = description;
        return this;
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case NAME:
                return isSetName();
            case WEIGHT:
                return isSetWeight();
            case AGE:
                return isSetAge();
            case JUST_CAME:
                return isSetJustCame();
            case DESCRIPTION:
                return isSetDescription();
        }
        throw new IllegalStateException();
    }

    /** Returns true if field weight is set (has been assigned a value) and false otherwise */
    public boolean isSetWeight() {
        return EncodingUtils.testBit(__isset_bitfield, __WEIGHT_ISSET_ID);
    }

    /** Returns true if field age is set (has been assigned a value) and false otherwise */
    public boolean isSetAge() {
        return EncodingUtils.testBit(__isset_bitfield, __AGE_ISSET_ID);
    }

    /** Returns true if field justCame is set (has been assigned a value) and false otherwise */
    public boolean isSetJustCame() {
        return EncodingUtils.testBit(__isset_bitfield, __JUSTCAME_ISSET_ID);
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof SpaceMonkey)
            return this.equals((SpaceMonkey) that);
        return false;
    }

    public boolean equals(SpaceMonkey that) {
        if (that == null)
            return false;

        boolean this_present_name = true && this.isSetName();
        boolean that_present_name = true && that.isSetName();
        if (this_present_name || that_present_name) {
            if (!(this_present_name && that_present_name))
                return false;
            if (!this.name.equals(that.name))
                return false;
        }

        boolean this_present_weight = true;
        boolean that_present_weight = true;
        if (this_present_weight || that_present_weight) {
            if (!(this_present_weight && that_present_weight))
                return false;
            if (this.weight != that.weight)
                return false;
        }

        boolean this_present_age = true;
        boolean that_present_age = true;
        if (this_present_age || that_present_age) {
            if (!(this_present_age && that_present_age))
                return false;
            if (this.age != that.age)
                return false;
        }

        boolean this_present_justCame = true;
        boolean that_present_justCame = true;
        if (this_present_justCame || that_present_justCame) {
            if (!(this_present_justCame && that_present_justCame))
                return false;
            if (this.justCame != that.justCame)
                return false;
        }

        boolean this_present_description = true && this.isSetDescription();
        boolean that_present_description = true && that.isSetDescription();
        if (this_present_description || that_present_description) {
            if (!(this_present_description && that_present_description))
                return false;
            if (!this.description.equals(that.description))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    @Override
    public int compareTo(SpaceMonkey other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetWeight()).compareTo(other.isSetWeight());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetWeight()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, other.weight);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetAge()).compareTo(other.isSetAge());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAge()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, other.age);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetJustCame()).compareTo(other.isSetJustCame());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetJustCame()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.justCame, other.justCame);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDescription()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SpaceMonkey(");
        boolean first = true;

        sb.append("name:");
        if (this.name == null) {
            sb.append("null");
        } else {
            sb.append(this.name);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("weight:");
        sb.append(this.weight);
        first = false;
        if (!first) sb.append(", ");
        sb.append("age:");
        sb.append(this.age);
        first = false;
        if (!first) sb.append(", ");
        sb.append("justCame:");
        sb.append(this.justCame);
        first = false;
        if (isSetDescription()) {
            if (!first) sb.append(", ");
            sb.append("description:");
            if (this.description == null) {
                sb.append("null");
            } else {
                sb.append(this.description);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (TException te) {
            throw new java.io.IOException(te);
        }
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (TException te) {
            throw new java.io.IOException(te);
        }
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        NAME((short) 1, "name"),
        WEIGHT((short) 2, "weight"),
        AGE((short) 3, "age"),
        JUST_CAME((short) 4, "justCame"),
        DESCRIPTION((short) 5, "description");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // NAME
                    return NAME;
                case 2: // WEIGHT
                    return WEIGHT;
                case 3: // AGE
                    return AGE;
                case 4: // JUST_CAME
                    return JUST_CAME;
                case 5: // DESCRIPTION
                    return DESCRIPTION;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    private static class SpaceMonkeyStandardSchemeFactory implements SchemeFactory {
        public SpaceMonkeyStandardScheme getScheme() {
            return new SpaceMonkeyStandardScheme();
        }
    }

    private static class SpaceMonkeyStandardScheme extends StandardScheme<SpaceMonkey> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, SpaceMonkey struct) throws TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.name = iprot.readString();
                            struct.setNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // WEIGHT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.weight = iprot.readI32();
                            struct.setWeightIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // AGE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.age = iprot.readI32();
                            struct.setAgeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // JUST_CAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.justCame = iprot.readBool();
                            struct.setJustCameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // DESCRIPTION
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.description = iprot.readString();
                            struct.setDescriptionIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, SpaceMonkey struct) throws TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.name != null) {
                oprot.writeFieldBegin(NAME_FIELD_DESC);
                oprot.writeString(struct.name);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
            oprot.writeI32(struct.weight);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(AGE_FIELD_DESC);
            oprot.writeI32(struct.age);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(JUST_CAME_FIELD_DESC);
            oprot.writeBool(struct.justCame);
            oprot.writeFieldEnd();
            if (struct.description != null) {
                if (struct.isSetDescription()) {
                    oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
                    oprot.writeString(struct.description);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class SpaceMonkeyTupleSchemeFactory implements SchemeFactory {
        public SpaceMonkeyTupleScheme getScheme() {
            return new SpaceMonkeyTupleScheme();
        }
    }

    private static class SpaceMonkeyTupleScheme extends TupleScheme<SpaceMonkey> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, SpaceMonkey struct) throws TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetName()) {
                optionals.set(0);
            }
            if (struct.isSetWeight()) {
                optionals.set(1);
            }
            if (struct.isSetAge()) {
                optionals.set(2);
            }
            if (struct.isSetJustCame()) {
                optionals.set(3);
            }
            if (struct.isSetDescription()) {
                optionals.set(4);
            }
            oprot.writeBitSet(optionals, 5);
            if (struct.isSetName()) {
                oprot.writeString(struct.name);
            }
            if (struct.isSetWeight()) {
                oprot.writeI32(struct.weight);
            }
            if (struct.isSetAge()) {
                oprot.writeI32(struct.age);
            }
            if (struct.isSetJustCame()) {
                oprot.writeBool(struct.justCame);
            }
            if (struct.isSetDescription()) {
                oprot.writeString(struct.description);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, SpaceMonkey struct) throws TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(5);
            if (incoming.get(0)) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
            }
            if (incoming.get(1)) {
                struct.weight = iprot.readI32();
                struct.setWeightIsSet(true);
            }
            if (incoming.get(2)) {
                struct.age = iprot.readI32();
                struct.setAgeIsSet(true);
            }
            if (incoming.get(3)) {
                struct.justCame = iprot.readBool();
                struct.setJustCameIsSet(true);
            }
            if (incoming.get(4)) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
            }
        }
    }

}

