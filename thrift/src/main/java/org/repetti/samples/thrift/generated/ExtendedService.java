/**
 * Autogenerated by Thrift Compiler (0.9.1)
 * <p/>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.repetti.samples.thrift.generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

public class ExtendedService {

    public interface Iface extends BasicService.Iface {

        public int sum(int first, int second) throws TException;

        public Response inspect(SpaceMonkey candidate) throws BadMonkeyException, TException;

    }

    public interface AsyncIface extends BasicService.AsyncIface {

        public void sum(int first, int second, AsyncMethodCallback resultHandler) throws TException;

        public void inspect(SpaceMonkey candidate, AsyncMethodCallback resultHandler) throws TException;

    }

    public static class Client extends BasicService.Client implements Iface {
        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public int sum(int first, int second) throws TException {
            send_sum(first, second);
            return recv_sum();
        }

        public void send_sum(int first, int second) throws TException {
            sum_args args = new sum_args();
            args.setFirst(first);
            args.setSecond(second);
            sendBase("sum", args);
        }

        public int recv_sum() throws TException {
            sum_result result = new sum_result();
            receiveBase(result, "sum");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sum failed: unknown result");
        }

        public Response inspect(SpaceMonkey candidate) throws BadMonkeyException, TException {
            send_inspect(candidate);
            return recv_inspect();
        }

        public void send_inspect(SpaceMonkey candidate) throws TException {
            inspect_args args = new inspect_args();
            args.setCandidate(candidate);
            sendBase("inspect", args);
        }

        public Response recv_inspect() throws BadMonkeyException, TException {
            inspect_result result = new inspect_result();
            receiveBase(result, "inspect");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.err != null) {
                throw result.err;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "inspect failed: unknown result");
        }

        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

    }

    public static class AsyncClient extends BasicService.AsyncClient implements AsyncIface {
        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void sum(int first, int second, AsyncMethodCallback resultHandler) throws TException {
            checkReady();
            sum_call method_call = new sum_call(first, second, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void inspect(SpaceMonkey candidate, AsyncMethodCallback resultHandler) throws TException {
            checkReady();
            inspect_call method_call = new inspect_call(candidate, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public static class sum_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int first;
            private int second;

            public sum_call(int first, int second, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.first = first;
                this.second = second;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sum", org.apache.thrift.protocol.TMessageType.CALL, 0));
                sum_args args = new sum_args();
                args.setFirst(first);
                args.setSecond(second);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public int getResult() throws TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_sum();
            }
        }

        public static class inspect_call extends org.apache.thrift.async.TAsyncMethodCall {
            private SpaceMonkey candidate;

            public inspect_call(SpaceMonkey candidate, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.candidate = candidate;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("inspect", org.apache.thrift.protocol.TMessageType.CALL, 0));
                inspect_args args = new inspect_args();
                args.setCandidate(candidate);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Response getResult() throws BadMonkeyException, TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_inspect();
            }
        }

    }

    public static class Processor<I extends Iface> extends BasicService.Processor<I> implements org.apache.thrift.TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("sum", new sum());
            processMap.put("inspect", new inspect());
            return processMap;
        }

        protected Processor(I iface, Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        public static class sum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sum_args> {
            public sum() {
                super("sum");
            }

            public sum_args getEmptyArgsInstance() {
                return new sum_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public sum_result getResult(I iface, sum_args args) throws TException {
                sum_result result = new sum_result();
                result.success = iface.sum(args.first, args.second);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class inspect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, inspect_args> {
            public inspect() {
                super("inspect");
            }

            public inspect_args getEmptyArgsInstance() {
                return new inspect_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public inspect_result getResult(I iface, inspect_args args) throws TException {
                inspect_result result = new inspect_result();
                try {
                    result.success = iface.inspect(args.candidate);
                } catch (BadMonkeyException err) {
                    result.err = err;
                }
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends BasicService.AsyncProcessor<I> {
        private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("sum", new sum());
            processMap.put("inspect", new inspect());
            return processMap;
        }

        protected AsyncProcessor(I iface, Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        public static class sum<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sum_args, Integer> {
            public sum() {
                super("sum");
            }

            public sum_args getEmptyArgsInstance() {
                return new sum_args();
            }

            public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Integer>() {
                    public void onComplete(Integer o) {
                        sum_result result = new sum_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        sum_result result = new sum_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, sum_args args, AsyncMethodCallback<Integer> resultHandler) throws TException {
                iface.sum(args.first, args.second, resultHandler);
            }
        }

        public static class inspect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, inspect_args, Response> {
            public inspect() {
                super("inspect");
            }

            public inspect_args getEmptyArgsInstance() {
                return new inspect_args();
            }

            public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Response>() {
                    public void onComplete(Response o) {
                        inspect_result result = new inspect_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        inspect_result result = new inspect_result();
                        if (e instanceof BadMonkeyException) {
                            result.err = (BadMonkeyException) e;
                            result.setErrIsSet(true);
                            msg = result;
                        } else {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, inspect_args args, AsyncMethodCallback<Response> resultHandler) throws TException {
                iface.inspect(args.candidate, resultHandler);
            }
        }

    }

    public static class sum_args implements org.apache.thrift.TBase<sum_args, sum_args._Fields>, java.io.Serializable, Cloneable, Comparable<sum_args> {
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sum_args");
        private static final org.apache.thrift.protocol.TField FIRST_FIELD_DESC = new org.apache.thrift.protocol.TField("first", org.apache.thrift.protocol.TType.I32, (short) 1);
        private static final org.apache.thrift.protocol.TField SECOND_FIELD_DESC = new org.apache.thrift.protocol.TField("second", org.apache.thrift.protocol.TType.I32, (short) 2);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        // isset id assignments
        private static final int __FIRST_ISSET_ID = 0;
        private static final int __SECOND_ISSET_ID = 1;

        static {
            schemes.put(StandardScheme.class, new sum_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new sum_argsTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.FIRST, new org.apache.thrift.meta_data.FieldMetaData("first", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.SECOND, new org.apache.thrift.meta_data.FieldMetaData("second", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sum_args.class, metaDataMap);
        }

        public int first; // required
        public int second; // required
        private byte __isset_bitfield = 0;

        public sum_args(
                int first,
                int second) {
            this();
            this.first = first;
            setFirstIsSet(true);
            this.second = second;
            setSecondIsSet(true);
        }

        public sum_args() {
        }

        public void setFirstIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIRST_ISSET_ID, value);
        }

        public void setSecondIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SECOND_ISSET_ID, value);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sum_args(sum_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.first = other.first;
            this.second = other.second;
        }

        public sum_args deepCopy() {
            return new sum_args(this);
        }

        @Override
        public void clear() {
            setFirstIsSet(false);
            this.first = 0;
            setSecondIsSet(false);
            this.second = 0;
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case FIRST:
                    if (value == null) {
                        unsetFirst();
                    } else {
                        setFirst((Integer) value);
                    }
                    break;

                case SECOND:
                    if (value == null) {
                        unsetSecond();
                    } else {
                        setSecond((Integer) value);
                    }
                    break;

            }
        }

        public void unsetFirst() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIRST_ISSET_ID);
        }

        public void unsetSecond() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SECOND_ISSET_ID);
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case FIRST:
                    return Integer.valueOf(getFirst());

                case SECOND:
                    return Integer.valueOf(getSecond());

            }
            throw new IllegalStateException();
        }

        public int getFirst() {
            return this.first;
        }

        public sum_args setFirst(int first) {
            this.first = first;
            setFirstIsSet(true);
            return this;
        }

        public int getSecond() {
            return this.second;
        }

        public sum_args setSecond(int second) {
            this.second = second;
            setSecondIsSet(true);
            return this;
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case FIRST:
                    return isSetFirst();
                case SECOND:
                    return isSetSecond();
            }
            throw new IllegalStateException();
        }

        /** Returns true if field first is set (has been assigned a value) and false otherwise */
        public boolean isSetFirst() {
            return EncodingUtils.testBit(__isset_bitfield, __FIRST_ISSET_ID);
        }

        /** Returns true if field second is set (has been assigned a value) and false otherwise */
        public boolean isSetSecond() {
            return EncodingUtils.testBit(__isset_bitfield, __SECOND_ISSET_ID);
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof sum_args)
                return this.equals((sum_args) that);
            return false;
        }

        public boolean equals(sum_args that) {
            if (that == null)
                return false;

            boolean this_present_first = true;
            boolean that_present_first = true;
            if (this_present_first || that_present_first) {
                if (!(this_present_first && that_present_first))
                    return false;
                if (this.first != that.first)
                    return false;
            }

            boolean this_present_second = true;
            boolean that_present_second = true;
            if (this_present_second || that_present_second) {
                if (!(this_present_second && that_present_second))
                    return false;
                if (this.second != that.second)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(sum_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetFirst()).compareTo(other.isSetFirst());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFirst()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.first, other.first);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSecond()).compareTo(other.isSetSecond());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSecond()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.second, other.second);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("sum_args(");
            boolean first = true;

            sb.append("first:");
            sb.append(this.first);
            first = false;
            if (!first) sb.append(", ");
            sb.append("second:");
            sb.append(this.second);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            FIRST((short) 1, "first"),
            SECOND((short) 2, "second");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // FIRST
                        return FIRST;
                    case 2: // SECOND
                        return SECOND;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class sum_argsStandardSchemeFactory implements SchemeFactory {
            public sum_argsStandardScheme getScheme() {
                return new sum_argsStandardScheme();
            }
        }

        private static class sum_argsStandardScheme extends StandardScheme<sum_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sum_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // FIRST
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.first = iprot.readI32();
                                struct.setFirstIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // SECOND
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.second = iprot.readI32();
                                struct.setSecondIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sum_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(FIRST_FIELD_DESC);
                oprot.writeI32(struct.first);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(SECOND_FIELD_DESC);
                oprot.writeI32(struct.second);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sum_argsTupleSchemeFactory implements SchemeFactory {
            public sum_argsTupleScheme getScheme() {
                return new sum_argsTupleScheme();
            }
        }

        private static class sum_argsTupleScheme extends TupleScheme<sum_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sum_args struct) throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetFirst()) {
                    optionals.set(0);
                }
                if (struct.isSetSecond()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetFirst()) {
                    oprot.writeI32(struct.first);
                }
                if (struct.isSetSecond()) {
                    oprot.writeI32(struct.second);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sum_args struct) throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.first = iprot.readI32();
                    struct.setFirstIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.second = iprot.readI32();
                    struct.setSecondIsSet(true);
                }
            }
        }

    }

    public static class sum_result implements org.apache.thrift.TBase<sum_result, sum_result._Fields>, java.io.Serializable, Cloneable, Comparable<sum_result> {
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sum_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;

        static {
            schemes.put(StandardScheme.class, new sum_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new sum_resultTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sum_result.class, metaDataMap);
        }

        public int success; // required
        private byte __isset_bitfield = 0;

        public sum_result(
                int success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        public sum_result() {
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public sum_result(sum_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public sum_result deepCopy() {
            return new sum_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Integer) value);
                    }
                    break;

            }
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return Integer.valueOf(getSuccess());

            }
            throw new IllegalStateException();
        }

        public int getSuccess() {
            return this.success;
        }

        public sum_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof sum_result)
                return this.equals((sum_result) that);
            return false;
        }

        public boolean equals(sum_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(sum_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("sum_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class sum_resultStandardSchemeFactory implements SchemeFactory {
            public sum_resultStandardScheme getScheme() {
                return new sum_resultStandardScheme();
            }
        }

        private static class sum_resultStandardScheme extends StandardScheme<sum_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, sum_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, sum_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class sum_resultTupleSchemeFactory implements SchemeFactory {
            public sum_resultTupleScheme getScheme() {
                return new sum_resultTupleScheme();
            }
        }

        private static class sum_resultTupleScheme extends TupleScheme<sum_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, sum_result struct) throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, sum_result struct) throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class inspect_args implements org.apache.thrift.TBase<inspect_args, inspect_args._Fields>, java.io.Serializable, Cloneable, Comparable<inspect_args> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("inspect_args");
        private static final org.apache.thrift.protocol.TField CANDIDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("candidate", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new inspect_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new inspect_argsTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CANDIDATE, new org.apache.thrift.meta_data.FieldMetaData("candidate", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpaceMonkey.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(inspect_args.class, metaDataMap);
        }

        public SpaceMonkey candidate; // required

        public inspect_args(
                SpaceMonkey candidate) {
            this();
            this.candidate = candidate;
        }

        public inspect_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public inspect_args(inspect_args other) {
            if (other.isSetCandidate()) {
                this.candidate = new SpaceMonkey(other.candidate);
            }
        }

        /** Returns true if field candidate is set (has been assigned a value) and false otherwise */
        public boolean isSetCandidate() {
            return this.candidate != null;
        }

        public inspect_args deepCopy() {
            return new inspect_args(this);
        }

        @Override
        public void clear() {
            this.candidate = null;
        }

        public void setCandidateIsSet(boolean value) {
            if (!value) {
                this.candidate = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case CANDIDATE:
                    if (value == null) {
                        unsetCandidate();
                    } else {
                        setCandidate((SpaceMonkey) value);
                    }
                    break;

            }
        }

        public void unsetCandidate() {
            this.candidate = null;
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case CANDIDATE:
                    return getCandidate();

            }
            throw new IllegalStateException();
        }

        public SpaceMonkey getCandidate() {
            return this.candidate;
        }

        public inspect_args setCandidate(SpaceMonkey candidate) {
            this.candidate = candidate;
            return this;
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case CANDIDATE:
                    return isSetCandidate();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof inspect_args)
                return this.equals((inspect_args) that);
            return false;
        }

        public boolean equals(inspect_args that) {
            if (that == null)
                return false;

            boolean this_present_candidate = true && this.isSetCandidate();
            boolean that_present_candidate = true && that.isSetCandidate();
            if (this_present_candidate || that_present_candidate) {
                if (!(this_present_candidate && that_present_candidate))
                    return false;
                if (!this.candidate.equals(that.candidate))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(inspect_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetCandidate()).compareTo(other.isSetCandidate());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCandidate()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candidate, other.candidate);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("inspect_args(");
            boolean first = true;

            sb.append("candidate:");
            if (this.candidate == null) {
                sb.append("null");
            } else {
                sb.append(this.candidate);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
            if (candidate != null) {
                candidate.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CANDIDATE((short) 1, "candidate");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // CANDIDATE
                        return CANDIDATE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class inspect_argsStandardSchemeFactory implements SchemeFactory {
            public inspect_argsStandardScheme getScheme() {
                return new inspect_argsStandardScheme();
            }
        }

        private static class inspect_argsStandardScheme extends StandardScheme<inspect_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, inspect_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // CANDIDATE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.candidate = new SpaceMonkey();
                                struct.candidate.read(iprot);
                                struct.setCandidateIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, inspect_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.candidate != null) {
                    oprot.writeFieldBegin(CANDIDATE_FIELD_DESC);
                    struct.candidate.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class inspect_argsTupleSchemeFactory implements SchemeFactory {
            public inspect_argsTupleScheme getScheme() {
                return new inspect_argsTupleScheme();
            }
        }

        private static class inspect_argsTupleScheme extends TupleScheme<inspect_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, inspect_args struct) throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetCandidate()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetCandidate()) {
                    struct.candidate.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, inspect_args struct) throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.candidate = new SpaceMonkey();
                    struct.candidate.read(iprot);
                    struct.setCandidateIsSet(true);
                }
            }
        }

    }

    public static class inspect_result implements org.apache.thrift.TBase<inspect_result, inspect_result._Fields>, java.io.Serializable, Cloneable, Comparable<inspect_result> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("inspect_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new inspect_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new inspect_resultTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
            tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(inspect_result.class, metaDataMap);
        }

        public Response success; // required
        public BadMonkeyException err; // required

        public inspect_result(
                Response success,
                BadMonkeyException err) {
            this();
            this.success = success;
            this.err = err;
        }

        public inspect_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public inspect_result(inspect_result other) {
            if (other.isSetSuccess()) {
                this.success = new Response(other.success);
            }
            if (other.isSetErr()) {
                this.err = new BadMonkeyException(other.err);
            }
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        /** Returns true if field err is set (has been assigned a value) and false otherwise */
        public boolean isSetErr() {
            return this.err != null;
        }

        public inspect_result deepCopy() {
            return new inspect_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.err = null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setErrIsSet(boolean value) {
            if (!value) {
                this.err = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Response) value);
                    }
                    break;

                case ERR:
                    if (value == null) {
                        unsetErr();
                    } else {
                        setErr((BadMonkeyException) value);
                    }
                    break;

            }
        }

        public void unsetSuccess() {
            this.success = null;
        }

        public void unsetErr() {
            this.err = null;
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case ERR:
                    return getErr();

            }
            throw new IllegalStateException();
        }

        public Response getSuccess() {
            return this.success;
        }

        public inspect_result setSuccess(Response success) {
            this.success = success;
            return this;
        }

        public BadMonkeyException getErr() {
            return this.err;
        }

        public inspect_result setErr(BadMonkeyException err) {
            this.err = err;
            return this;
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case ERR:
                    return isSetErr();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof inspect_result)
                return this.equals((inspect_result) that);
            return false;
        }

        public boolean equals(inspect_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_err = true && this.isSetErr();
            boolean that_present_err = true && that.isSetErr();
            if (this_present_err || that_present_err) {
                if (!(this_present_err && that_present_err))
                    return false;
                if (!this.err.equals(that.err))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(inspect_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetErr()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("inspect_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("err:");
            if (this.err == null) {
                sb.append("null");
            } else {
                sb.append(this.err);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            ERR((short) 1, "err");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // ERR
                        return ERR;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class inspect_resultStandardSchemeFactory implements SchemeFactory {
            public inspect_resultStandardScheme getScheme() {
                return new inspect_resultStandardScheme();
            }
        }

        private static class inspect_resultStandardScheme extends StandardScheme<inspect_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, inspect_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new Response();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // ERR
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.err = new BadMonkeyException();
                                struct.err.read(iprot);
                                struct.setErrIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, inspect_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.err != null) {
                    oprot.writeFieldBegin(ERR_FIELD_DESC);
                    struct.err.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class inspect_resultTupleSchemeFactory implements SchemeFactory {
            public inspect_resultTupleScheme getScheme() {
                return new inspect_resultTupleScheme();
            }
        }

        private static class inspect_resultTupleScheme extends TupleScheme<inspect_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, inspect_result struct) throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetErr()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetErr()) {
                    struct.err.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, inspect_result struct) throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new Response();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.err = new BadMonkeyException();
                    struct.err.read(iprot);
                    struct.setErrIsSet(true);
                }
            }
        }

    }

}
